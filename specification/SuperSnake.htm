<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <title></title>
  <style type="text/css">code{white-space: pre;}</style>
</head>
<body>
<p>H27 部内プロコン(SuperSnake)ルール</p>
<h1 id="h27-部内プロコンsupersnakeルール">H27 部内プロコン(SuperSnake)ルール</h1>
<h2 id="概要">概要</h2>
<p>対戦型パズルゲーム「SuperSnake」のAIを作って対戦します。ゲームは「ステップ」を単位としてターン制で進行します。</p>
<div class="figure">
<img src="img/ss.png" alt="SuperSnakeのイメージ図" />
<p class="caption">SuperSnakeのイメージ図</p>
</div>
<h2 id="用語など">用語など</h2>
<h3 id="フィールドfield">フィールド(field)</h3>
<ul>
<li>ゲームが行われる2次元格子状の領域です。</li>
<li>フィールドには幅(width)・高さ(height)があります。それぞれ2以上255以下の整数です。</li>
<li>ゲームの進行には影響しませんが、フィールドには名前があります。</li>
</ul>
<h3 id="セルcell">セル(cell)</h3>
<ul>
<li>フィールド上の1マスです。</li>
<li>セルには通行可能(passable)なものとそうでないものがあります。</li>
<li>ゲームの進行に伴い、通行可能だったセルが通行可能でなくなることもあります。始めから通行可能でないセルもありえます。</li>
<li>ゲームの進行には影響しませんが、セルには色があります。</li>
</ul>
<h3 id="プレイヤーplayer">プレイヤー(player)</h3>
<ul>
<li>フィールド上でゲームを行うキャラクターです。</li>
<li>プレイヤーには位置、向き、生死があります。</li>
<li>ゲームの進行には影響しませんが、各プレイヤーには一意なプレイヤー番号(player number)が割り当てられます。プレイヤー番号は0以上プレイヤー数未満の整数です。</li>
<li>ゲームの進行には影響しませんが、プレイヤーには名前と色があります。</li>
</ul>
<h3 id="位置position">位置(position)</h3>
<ul>
<li>フィールド内外の座標です。(x, y)で表します。</li>
<li>フィールドの左上のセルを(0, 0)とし、xの正の方向を右、yの正の方向を下とします。例えば、プレイヤーが(0, 0)から左に移動した場合の位置は(-1, 0)となります。</li>
</ul>
<h3 id="向きdirection">向き(direction)</h3>
<ul>
<li>プレイヤーの向きです。</li>
<li>右(right)、右上(right up)、上(up)、左上(left up)、左(left)、左下(left down)、下(down)、右下(right down)の8種類があります。</li>
</ul>
<h3 id="生死alivedead">生死(alive/dead)</h3>
<ul>
<li>プレイヤーが生きている(alive)か死んでいる(dead)かです。</li>
<li>死んでいるプレイヤーは操作できません。</li>
</ul>
<h3 id="セルの状態cell-state">セルの状態(cell state)</h3>
<ul>
<li>セルの名前と色を合わせたものです。</li>
</ul>
<h3 id="フィールドの状態field-state">フィールドの状態(field state)</h3>
<ul>
<li>フィールドの名前と幅、高さ、フィールド上のすべてのセルの状態を合わせたものです。</li>
</ul>
<h3 id="プレイヤーの状態player-state">プレイヤーの状態(player state)</h3>
<ul>
<li>プレイヤー番号とプレイヤーの名前、色、位置、向き、生死を合わせたものです。</li>
</ul>
<h3 id="ゲームの状態game-state">ゲームの状態(game state)</h3>
<ul>
<li>フィールドの状態とすべてのプレイヤーの状態を合わせたものです。</li>
</ul>
<h3 id="ステップstep">ステップ(step)</h3>
<ul>
<li>サーバーがプレイヤーの行動を基にゲームを進行すること、およびそのタイミングを1とする単位です。</li>
<li>詳細は「ゲームの進行」をご覧ください。</li>
</ul>
<h3 id="行動action">行動(action)</h3>
<ul>
<li>生きているプレイヤーの1ステップ後の状態を決定する情報です。</li>
<li>直進(straight)、右折(right turn)、左折(left turn)の3種類があります。</li>
<li>詳細は「ゲームの進行」をご覧ください。</li>
</ul>
<h3 id="サーバーserver">サーバー(server)</h3>
<ul>
<li>ゲームの進行処理を行うシステムです。</li>
<li>サーバーという用語になっていますが、今回はネットワークを介さずに1つのPCで実施する予定です。</li>
</ul>
<h3 id="クライアントclient">クライアント(client)</h3>
<ul>
<li>各プレイヤーの行動を決定する処理を行うシステムです。</li>
<li>今回の部内プロコン参加者が作成する部分です。</li>
</ul>
<h2 id="ゲームの進行">ゲームの進行</h2>
<p>このゲームの進行は1ステップごとに行われます。 ゲームの流れは以下のようになります。</p>
<ol style="list-style-type: decimal">
<li>サーバーがクライアントの参加を受け付けます。この時、各クライアントに対応するプレイヤーが割り当てられます。</li>
<li>サーバーがすべてのプレイヤーについて、プレイヤーの位置のセルを通行可能でなくします。</li>
<li>サーバーから各クライアントへゲームの状態が送信されます。</li>
<li>クライアントがゲームの状態を基に割り当てられたプレイヤーの行動を決定して、サーバーに行動を送信します。</li>
<li>サーバーがすべてのクライアントからの行動を受信するか、決められたタイムアウト時間に達したら、サーバーはゲームのステップ処理を行います。</li>
<li>ゲームが終了していなければ2.に戻ります。</li>
</ol>
<p>サーバーで行われるステップ処理の内容は以下のとおりです。</p>
<ol style="list-style-type: decimal">
<li>（移動フェーズ）生きているすべてのプレイヤーについて、
<ol style="list-style-type: decimal">
<li>プレイヤーの行動に応じてプレイヤーの向きを変えます。直進ならそのまま、右折なら右に45度回転、左折なら左に45度回転です。</li>
<li>プレイヤーの向いている方向にプレイヤーの位置を1つ移動します。</li>
</ol></li>
<li>（死亡判定フェーズ）生きているすべてのプレイヤーについて、以下のいずれかの条件を満たすときそのプレイヤーは死亡します。
<ul>
<li>プレイヤーの位置がフィールド外</li>
<li>プレイヤーの位置のセルが通行不可能</li>
<li>同じ位置に他のプレイヤー（生死を問わない）がいる</li>
</ul></li>
<li>すべてのプレイヤー（生死を問わない）について、プレイヤーの位置のセルを通行可能でなくします。</li>
</ol>
<p>ゲームの終了条件は、以下のいずれかの条件を満たすことです。</p>
<ul>
<li>プレイヤーが1人以外全員死亡</li>
<li>プレイヤーが全員死亡</li>
</ul>
<h2 id="順位">順位</h2>
<p>より長く生き残ったほうが上位となります。同時に死亡した場合は同順位となります。</p>
<h2 id="クライアントの作成">クライアントの作成</h2>
<h3 id="クラスの作成手順supersnakestandalone">クラスの作成手順(SuperSnakeStandalone)</h3>
<ol style="list-style-type: decimal">
<li>プロジェクトを開く
<ol style="list-style-type: decimal">
<li>コマンドプロンプトでソースコードを取得したいフォルダに移動します。</li>
<li>以下のコマンドを入力してソースコードを取得します。
<ul>
<li><code>git clone https://github.com/a1502020/super-snake.git</code></li>
</ul></li>
<li>取得したフォルダ内の「super-snake.sln」を開きます。
<ul>
<li>Visual Studio が起動します。</li>
</ul></li>
</ol></li>
<li>クラスを追加する
<ol style="list-style-type: decimal">
<li>ソリューションエクスプローラー上で「SuperSnakeStandalone」内の「Clients」を右クリックし [Add] → [New Item] をクリックします。
<ul>
<li>日本語では [追加] → [新しい項目] ？</li>
<li><img src="img/class.png" alt="クラスの追加" /></li>
</ul></li>
<li>C#のクラスを選択し、適当なクラス名を入力してクラスを追加します。
<ul>
<li>以下のサンプルコードでは、このクラス名を<code>SampleClient</code>として説明する。</li>
</ul></li>
<li>作成したクラスが、クラス<code>Client</code>を継承するようにします。
<ul>
<li><code>public class SampleClient : Client</code></li>
</ul></li>
</ol></li>
<li>AIを実装する
<ol style="list-style-type: decimal">
<li>抽象メソッド<code>Think</code>を作成します。
<ul>
<li><code>public override Action Think(GameState gameState, int myPlayerNum)</code></li>
<li><code>public override</code>まで書けば IntelliSenseが自動で入力してくれます。</li>
<li><code>Action</code>という名前が<code>System.Action</code>と被っているため、ファイル先頭のusingに<code>using Action = SuperSnake.Core.Action;</code>を追加すると良いです。</li>
</ul></li>
<li><code>Think</code>の内容としてAIを実装します。
<ul>
<li><code>Think</code>は「ゲームの状態」と自分の「プレイヤー番号」を受け取り、「行動」を返すメソッドです。</li>
</ul></li>
</ol></li>
<li>デバッグ
<ul>
<li>（準備中）</li>
</ul></li>
</ol>
<h3 id="ゲームの状態のアクセス方法">ゲームの状態のアクセス方法</h3>
<ul>
<li><code>gameState</code> : ゲームの状態（<code>Think</code>の第1引数）
<ul>
<li><code>gameState.Field</code> : フィールドの状態（以下<code>field</code>）
<ul>
<li><code>field.Width</code> : フィールドの幅</li>
<li><code>field.Height</code> : フィールドの高さ</li>
<li><code>field.Cells[x][y]</code> : 位置<code>(x, y)</code>のセルの状態（以下<code>cell</code>）
<ul>
<li><code>cell.Passable</code> : セルが通行可能か否か</li>
</ul></li>
</ul></li>
<li><code>gameState.Players[i]</code> : プレイヤー番号<code>i</code>のプレイヤーの状態（以下<code>player</code>）
<ul>
<li><code>player.Position</code> : プレイヤーの位置（以下<code>position</code>）
<ul>
<li><code>position.X</code> : X座標</li>
<li><code>position.Y</code> : Y座標</li>
</ul></li>
<li><code>player.Direction</code> : プレイヤーの向き（以下<code>direction</code>）
<ul>
<li><code>direction.Value</code> : 以下の8つの値のいずれか
<ul>
<li><code>Direction.Right</code></li>
<li><code>Direction.RightUp</code></li>
<li><code>Direction.Up</code></li>
<li><code>Direction.LeftUp</code></li>
<li><code>Direction.Left</code></li>
<li><code>Direction.LeftDown</code></li>
<li><code>Direction.Down</code></li>
<li><code>Direction.RightDown</code></li>
</ul></li>
</ul></li>
<li><code>player.Alive</code> : プレイヤーが生きているか否か</li>
<li><code>player.Dead</code> : プレイヤーが死んでいるか否か</li>
</ul></li>
</ul></li>
<li><code>myPlayerNum</code> : 自分のプレイヤー番号（<code>Think</code>の第2引数）</li>
</ul>
<h3 id="補助メソッド等">補助メソッド等</h3>
<ul>
<li><code>PositionState GetNextPosition(PositionState pos, DirectionState dir)</code>
<ul>
<li>位置と向きを渡すと、その位置からその向きに1つ進んだ位置を返します。</li>
</ul></li>
<li><code>DirectionState GetLeft(DirectionState dir)</code>
<ul>
<li>向きを渡すと、その向きから左に45度回転した向きを返します。</li>
</ul></li>
<li><code>DirectionState GetRight(DirectionState dir)</code>
<ul>
<li>向きを渡すと、その向きから右に45度回転した向きを返します。</li>
</ul></li>
<li><code>bool IsIn(FieldState field, PositionState pos)</code>
<ul>
<li>フィールドと位置を渡すと、その位置がフィールド内にあるか否かを返します。</li>
</ul></li>
<li><code>Random rnd</code>
<ul>
<li>乱数を生成できます。</li>
<li><code>rnd.Next(3)</code>とすれば、<code>0</code>、<code>1</code>、<code>2</code>のいずれかの値が返されます。</li>
</ul></li>
<li>あったほうが良さそうなものがあれば追加します。もしくはプルリクください。</li>
</ul>
<h3 id="ai実装のためのポイント">AI実装のためのポイント</h3>
<ul>
<li><code>RansuchanClient</code>を参考にしてください。</li>
<li>無限ループに陥らないように注意してください。</li>
<li>フィールドの範囲外の位置のセルにアクセスするなどして、例外が発生しないように注意してください。</li>
</ul>
</body>
</html>
